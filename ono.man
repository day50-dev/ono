.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.SH ono(1) - Universal AI-Powered Preprocessor
.SS NAME
.PP
\f[B]ono\f[R] - Universal AI-powered preprocessor for intelligent
templating
.SS SYNOPSIS
.PP
\f[B]ono\f[R] [\f[I]OPTIONS\f[R]] [\f[I]FILE\f[R]]
.PD 0
.P
.PD
\f[B]ono\f[R] \f[B]contexts\f[R] \f[I]COMMAND\f[R] [\f[I]ARGS\f[R]]
.PD 0
.P
.PD
\f[B]ono\f[R] \f[B]info\f[R] \f[I]FILE\f[R]
.PD 0
.P
.PD
\f[B]ono\f[R] \f[B]validate\f[R] [\f[I]OPTIONS\f[R]] \f[I]FILE\f[R]
.SS DESCRIPTION
.PP
\f[B]ono\f[R] is a universal templating preprocessor that uses AI to
solve cross-platform and language-specific problems through intelligent
content generation.
It processes template files containing \f[V]?ono\f[R] blocks and
generates output with contextually appropriate content.
.PP
Template files use the \f[V].ono.ext\f[R] naming convention (e.g.,
\f[V]deploy.ono.sh\f[R], \f[V]config.ono.json\f[R]) and remain
syntactically valid in their target language during editing.
.SS OPTIONS
.SS Processing Options
.PP
\f[B]-f\f[R], \f[B]\[en]format\f[R] \f[I]FORMAT\f[R]
.PD 0
.P
.PD
Specify target output format.
Auto-detected from file extension if not provided.
.PP
\f[B]-g\f[R], \f[B]\[en]debug\f[R]
.PD 0
.P
.PD
Include source debugging information in output.
Original ono blocks are preserved as comments with
\f[V]type=source\f[R].
.PP
\f[B]\[en]meta\f[R] \f[I]STYLE\f[R]
.PD 0
.P
.PD
Control metadata generation.
Options: \f[V]inline\f[R] (default), \f[V]file\f[R], \f[V]none\f[R].
- \f[V]inline\f[R]: Embed metadata as comments using ono syntax -
\f[V]file\f[R]: Create separate \f[V].ono-meta\f[R] file
.PD 0
.P
.PD
- \f[V]none\f[R]: Generate clean output without metadata
.PP
\f[B]\[en]context\f[R] \f[I]PATH\f[R]
.PD 0
.P
.PD
Override default context for all blocks.
See \f[B]CONTEXT MANAGEMENT\f[R] for path syntax.
.PP
\f[B]-o\f[R], \f[B]\[en]output\f[R] \f[I]FILE\f[R]
.PD 0
.P
.PD
Write output to specified file instead of stdout.
.SS Global Options
.PP
\f[B]-h\f[R], \f[B]\[en]help\f[R]
.PD 0
.P
.PD
Show help message and exit.
.PP
\f[B]-V\f[R], \f[B]\[en]version\f[R]
.PD 0
.P
.PD
Show version information and exit.
.PP
\f[B]-v\f[R], \f[B]\[en]verbose\f[R]
.PD 0
.P
.PD
Enable verbose output for debugging.
.PP
\f[B]-q\f[R], \f[B]\[en]quiet\f[R]
.PD 0
.P
.PD
Suppress all non-error output.
.SS SYNTAX
.SS Basic Ono Blocks
.PP
Ono blocks use flexible delimiter syntax with the \f[V]?ono\f[R]
keyword:
.IP
.nf
\f[C]
\[dq]?ono get users temp directory ?\[dq]
{?ono get api key from environment ?}
<?ono generate secure password ?>
?ono get current username ?
\f[R]
.fi
.SS Configuration Syntax
.PP
Blocks support both pass-through and ono-specific parameters:
.IP
.nf
\f[C]
\[dq]?ono 
model=claude-3-5-sonnet
temperature=0.2
\[at]context=preserve_previous/analysis
\[at]type=agent

analyze this codebase structure and suggest improvements
?\[dq]
\f[R]
.fi
.PP
\f[B]Pass-through parameters\f[R] (sent to LLM): -
\f[V]model=STRING\f[R] - LLM model name - \f[V]temperature=FLOAT\f[R] -
Response randomness (0.0-2.0)
.PD 0
.P
.PD
- \f[V]max_tokens=INT\f[R] - Maximum response length
.PP
\f[B]Ono-specific parameters\f[R] (prefixed with \f[V]\[at]\f[R]): -
\f[V]\[at]context=PATH\f[R] - Context management directive -
\f[V]\[at]execution=MODE\f[R] - Execution control (always, once,
compile, runtime) - \f[V]\[at]type=TYPE\f[R] - Block type (model, agent,
meta, source) - \f[V]\[at]scope=SCOPE\f[R] - Execution scope (local,
global, instance)
.SS File-Level Configuration
.PP
Global settings can be specified in comments at the top of template
files:
.IP
.nf
\f[C]
#!/usr/bin/env python
# \[at]ono.delimiters = 🐊, 🦋
# \[at]ono.model = gpt-4
# \[at]ono.context = deployment
# \[at]ono.execution = once

database_url = 🐊?ono get database connection string 🦋
\f[R]
.fi
.SS CONTEXT MANAGEMENT
.SS Context Paths
.PP
Context paths use forward-slash notation for hierarchical organization:
.IP \[bu] 2
\f[V]new\f[R] - Create fresh context, ignore previous conversations
.IP \[bu] 2
\f[V]preserve_previous\f[R] - Continue from most recent context
.PD 0
.P
.PD
.IP \[bu] 2
\f[V]preserve_previous/analysis\f[R] - Named branch from previous
context
.IP \[bu] 2
\f[V]preserve_previous/analysis/testing\f[R] - Nested sub-branch
.SS Context Commands
.PP
\f[B]ono contexts list\f[R]
.PD 0
.P
.PD
Show all available contexts for current project.
.PP
\f[B]ono contexts show\f[R] \f[I]PATH\f[R]
.PD 0
.P
.PD
Display detailed information about specific context.
.PP
\f[B]ono contexts clean\f[R]
.PD 0
.P
.PD
Remove old or unused context data.
.PP
\f[B]ono contexts export\f[R] \f[I]PATH\f[R] \f[I]FILE\f[R]
.PD 0
.P
.PD
Export context to file for backup or sharing.
.PP
\f[B]ono contexts import\f[R] \f[I]FILE\f[R]
.PD 0
.P
.PD
Import context from file.
.SS FILE NAMING
.PP
Template files use the \f[V].ono.ext\f[R] convention:
.IP \[bu] 2
\f[V]deploy.ono.sh\f[R] - Bash script template
.IP \[bu] 2
\f[V]config.ono.json\f[R] - JSON configuration template
.IP \[bu] 2
\f[V]app.ono.py\f[R] - Python application template
.PD 0
.P
.PD
.IP \[bu] 2
\f[V]Dockerfile.ono\f[R] - Docker container template
.PP
This preserves syntax highlighting and tool compatibility while clearly
identifying template files.
.SS METADATA
.SS Build Information
.PP
Processed files include build metadata for reproducibility:
.IP
.nf
\f[C]
#!/bin/bash
# ?ono
# type=meta
# build_id=20250530-143022-abc123
# timestamp=2025-05-30T14:30:22Z
# ono_version=0.1.0
# source=deploy.ono.sh
# ?

temp_dir=\[dq]/tmp\[dq]
\f[R]
.fi
.SS Source Debugging
.PP
With \f[B]-g\f[R] flag, original ono blocks are preserved:
.IP
.nf
\f[C]
# ?ono
# type=source
# block_id=1
# original=\[dq]?ono get users temp directory ?\[dq]
# context=preserve_previous
# model=claude-3-5-sonnet
# resolved=\[dq]/tmp\[dq]
# ?
\f[R]
.fi
.SS CONFIGURATION
.SS Global Configuration
.PP
File: \f[V]\[ti]/.ono/config.yaml\f[R]
.IP
.nf
\f[C]
llm:
  api_url: \[dq]http://localhost:8000/v1\[dq]
  api_key: \[dq]${ONO_API_KEY}\[dq]
  default_model: \[dq]claude-3-5-sonnet\[dq]
  timeout: 30

defaults:
  meta_style: \[dq]inline\[dq]
  context_storage: \[dq]\[ti]/.ono/contexts\[dq]
  execution: \[dq]always\[dq]

formats:
  bash:
    validator: \[dq]shellcheck\[dq]
  python:
    validator: \[dq]python -m py_compile\[dq]
  json:
    validator: \[dq]jq .\[dq]
\f[R]
.fi
.SS Project Configuration
.PP
File: \f[V].ono/config.yaml\f[R]
.IP
.nf
\f[C]
llm:
  default_model: \[dq]gpt-4\[dq]
  
context:
  default_path: \[dq]main\[dq]
  auto_cleanup: false

formats:
  dockerfile:
    validator: \[dq]hadolint\[dq]
\f[R]
.fi
.SS Environment Variables
.PP
\f[B]ONO_API_KEY\f[R]
.PD 0
.P
.PD
API key for LLM service.
Required unless specified in configuration.
.PP
\f[B]ONO_API_URL\f[R]
.PD 0
.P
.PD
LLM API endpoint URL.
Defaults to \f[V]http://localhost:8000/v1\f[R].
.PP
\f[B]ONO_CONFIG_PATH\f[R]
.PD 0
.P
.PD
Override default configuration file location.
.PP
\f[B]ONO_CONTEXT_PATH\f[R]
.PD 0
.P
.PD
Override default context storage location.
.SS EXAMPLES
.SS Basic Usage
.IP
.nf
\f[C]
# Process a shell script template
ono deploy.ono.sh > deploy.sh

# Process with specific format and metadata options
ono --format json --meta file config.ono.json > config.json

# Include debugging information
ono -g app.ono.py > app.py
\f[R]
.fi
.SS Cross-Platform Script
.IP
.nf
\f[C]
# deploy.ono.sh
#!/bin/bash
TEMP_DIR=\[dq]?ono get users temp directory ?\[dq]
PYTHON_EXEC=\[dq]?ono find python executable path ?\[dq]
CONFIG_DIR=\[dq]?ono get users config directory ?\[dq]

echo \[dq]Using temp directory: $TEMP_DIR\[dq]
$PYTHON_EXEC setup.py install --user
\f[R]
.fi
.SS Context-Aware Processing
.IP
.nf
\f[C]
# analysis.ono.py
import os
import json

# Establish analysis context
config = \[dq]?ono 
\[at]context=preserve_previous/analysis
\[at]type=agent
analyze this project structure and determine appropriate configuration
?\[dq]

# Use previous analysis for specific tasks
database_config = \[dq]?ono
\[at]context=preserve_previous/analysis/database
\[at]type=model
generate database configuration based on the analysis above
?\[dq]

# Fork for testing configuration
test_config = \[dq]?ono
\[at]context=preserve_previous/analysis/testing
\[at]type=model  
create test database configuration with mock data
?\[dq]
\f[R]
.fi
.SS Custom Delimiters
.IP
.nf
\f[C]
#!/usr/bin/env python
# \[at]ono.delimiters = 🔥, 💧

api_key = 🔥?ono get api key from secure storage 💧
database_url = 🔥?ono construct database url for production 💧
\f[R]
.fi
.SS VALIDATION
.PP
\f[B]ono validate\f[R] [\f[I]OPTIONS\f[R]] \f[I]FILE\f[R]
.PD 0
.P
.PD
Validate template syntax without processing.
.PP
\f[B]\[en]strict\f[R]
.PD 0
.P
.PD
Enable strict validation mode with additional checks.
.PP
\f[B]\[en]format\f[R] \f[I]FORMAT\f[R]
.PD 0
.P
.PD
Validate for specific target format.
.PP
Example:
.IP
.nf
\f[C]
ono validate deploy.ono.sh
ono validate --format python --strict app.ono.py
\f[R]
.fi
.SS INFO COMMAND
.PP
\f[B]ono info\f[R] \f[I]FILE\f[R]
.PD 0
.P
.PD
Display build metadata for processed files.
.PP
Example:
.IP
.nf
\f[C]
$ ono info deploy.sh
Build ID: 20250530-143022-abc123
Source: deploy.ono.sh
Timestamp: 2025-05-30T14:30:22Z
Ono Version: 0.1.0
Blocks: 3 processed
Total Tokens: 245
\f[R]
.fi
.SS EXIT STATUS
.PP
\f[B]0\f[R]
.PD 0
.P
.PD
Success
.PP
\f[B]1\f[R]
.PD 0
.P
.PD
General error (invalid arguments, file not found, etc.)
.PP
\f[B]2\f[R]
.PD 0
.P
.PD
Parse error (malformed ono syntax)
.PP
\f[B]3\f[R]
.PD 0
.P
.PD
Processing error (LLM API failure, context error)
.PP
\f[B]4\f[R]
.PD 0
.P
.PD
Validation error (invalid output format)
.SS FILES
.PP
\f[B]\[ti]/.ono/config.yaml\f[R]
.PD 0
.P
.PD
Global configuration file
.PP
\f[B].ono/config.yaml\f[R]
.PD 0
.P
.PD
Project-specific configuration file
.PP
\f[B]\[ti]/.ono/contexts/\f[R]
.PD 0
.P
.PD
Context storage directory
.PP
\f[B]FILE.ono-meta\f[R]
.PD 0
.P
.PD
Separate metadata files (when using \f[V]--meta file\f[R])
.SS ENVIRONMENT
.PP
Ono respects the following environment variables for LLM API
configuration:
.IP \[bu] 2
\f[V]ONO_API_KEY\f[R] - API authentication key
.IP \[bu] 2
\f[V]ONO_API_URL\f[R] - LLM service endpoint
.IP \[bu] 2
\f[V]ONO_CONFIG_PATH\f[R] - Configuration file override
.IP \[bu] 2
\f[V]ONO_CONTEXT_PATH\f[R] - Context storage override
.SS SECURITY
.SS Input Validation
.PP
All ono block content is sanitized before processing.
Configuration parameters are validated against known schemas.
.SS Output Safety
.PP
Generated code is validated using format-specific tools when available
(shellcheck, python -m py_compile, etc.).
.SS API Security
.PP
API keys are stored securely and requests use encrypted connections when
available.
.SS DIAGNOSTICS
.SS Common Errors
.PP
\f[B]Parse Error: Unmatched delimiter on line 15\f[R]
.PD 0
.P
.PD
Check that opening and closing delimiters match exactly.
.PP
\f[B]Context Error: Path `invalid/path' not found\f[R]
.PD 0
.P
.PD
Verify context path syntax.
Use \f[V]ono contexts list\f[R] to see available paths.
.PP
\f[B]API Error: Connection timeout\f[R]
.PD 0
.P
.PD
Check LLM service availability and network connectivity.
.PP
\f[B]Validation Error: Invalid JSON output\f[R]
.PD 0
.P
.PD
Generated content failed format validation.
Check template syntax.
.SS Debugging
.PP
Use \f[B]-v\f[R] for verbose output and \f[B]-g\f[R] to include source
debugging information in generated files.
.PP
Enable detailed logging:
.IP
.nf
\f[C]
export ONO_LOG_LEVEL=debug
ono -v process.ono.py
\f[R]
.fi
.SS INTEGRATION
.SS Build Systems
.IP
.nf
\f[C]
# Makefile integration
%.py: %.ono.py
    ono $< > $\[at]

%.sh: %.ono.sh  
    ono $< > $\[at]
    chmod +x $\[at]
\f[R]
.fi
.SS CI/CD Pipelines
.IP
.nf
\f[C]
# GitHub Actions
- name: Process Ono templates
  run: |
    ono --meta none deploy.ono.sh > deploy.sh
    ono config.ono.json > config.json
\f[R]
.fi
.SS Editor Integration
.PP
Most editors can be configured to recognize \f[V].ono.*\f[R] files:
.IP
.nf
\f[C]
// VS Code settings.json
{
  \[dq]files.associations\[dq]: {
    \[dq]*.ono.py\[dq]: \[dq]python\[dq],
    \[dq]*.ono.sh\[dq]: \[dq]shellscript\[dq],
    \[dq]*.ono.json\[dq]: \[dq]json\[dq]
  }
}
\f[R]
.fi
.SS SEE ALSO
.PP
\f[B]make\f[R](1), \f[B]cpp\f[R](1), \f[B]m4\f[R](1),
\f[B]jinja2\f[R](1)
.SS BUGS
.PP
Report bugs at: https://github.com/day50/ono/issues
.SS AUTHORS
.PP
Ono was created as part of the Day50 project to make LLMs effective for
production development workflows.
.SS COPYRIGHT
.PP
Copyright © 2025 Day50.
Licensed under the MIT License.
.PP
   *   *   *   *   *
.PP
\f[B]ono 0.1.0\f[R]
.PD 0
.P
.PD
\f[B]May 30, 2025\f[R]
